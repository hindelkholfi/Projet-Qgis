# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Pluginproject
                                 A QGIS plugin
 myfirstPluginproject
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-12-08
        git sha              : $Format:%H$
        copyright            : (C) 2021 by hind
        email                : hind@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from typing import ValuesView
from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction , QFileDialog
from qgis.core import QgsProject , Qgis
from qgis.core import QgsDataProvider

from qgis.core import (
  QgsApplication,
  QgsDataSourceUri,
  QgsCategorizedSymbolRenderer,
  QgsClassificationRange,
  QgsPointXY,
  QgsProject,
  QgsExpression,
  QgsField,
  QgsFields,
  QgsFeature,
  QgsFeatureRequest,
  QgsFeatureRenderer,
  QgsGeometry,
  QgsGraduatedSymbolRenderer,
  QgsMarkerSymbol,
  QgsMessageLog,
  QgsRectangle,
  QgsRendererCategory,
  QgsRendererRange,
  QgsSymbol,
  QgsVectorDataProvider,
  QgsVectorLayer,
  QgsVectorFileWriter,
  QgsWkbTypes,
  QgsSpatialIndex,
) 


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .myfirstPluginproject_dialog import PluginprojectDialog
import os.path
from qgis.utils import iface


class Pluginproject:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Pluginproject_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Pluginproject')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Pluginproject', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/myfirstPluginproject/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Pluginproject'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Pluginproject'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PluginprojectDialog()
            self.dlg.pushButton_1.clicked.connect(self.afficherPark)
            self.dlg.pushButton_4.clicked.connect(self.afficherArea)
            self.dlg.pushButton_5.clicked.connect(self.afficherRAC)
            self.dlg.pushButton_6.clicked.connect(self.chercherPark)
            self.dlg.pushButton_3.clicked.connect(self.trouverPark)


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


     # afficher les parcs sur la carte
    def afficherPark(self):
        
        fileName = "C:/Users/ACH/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/myfirstpluginproject/commun_urbans/commun_urbans/urban_parks_tg_15.shp"
        layer = QgsVectorLayer(fileName, "test", "ogr")
        subLayers = layer.dataProvider().subLayers()

        for subLayer in subLayers:
            name = subLayer.split(QgsDataProvider.SUBLAYER_SEPARATOR)[1]
            uri = "%s|layername=%s" % (fileName, name,)
            sub_vlayer = QgsVectorLayer(uri, name, 'ogr')
            QgsProject.instance().addMapLayer(sub_vlayer)
            nbr= layer.featureCount()
        for i in range(0,nbr):
            feature= layer.getFeature(i)
            self.dlg.comboBox.addItems([feature['name']])
       

     #afficher les informations des tous les parcs dans un tableau en l'affichant avec une couleur rouge sur la carte  
    def chercherPark(self):

        layer=iface.activeLayer()
        nbr= layer.featureCount()
        iface.mapCanvas().setSelectionColor(QColor('red'))
        layer.selectAll()
        self.dlg.tableWidget.setColumnCount(6)
        self.dlg.tableWidget.setRowCount(nbr)
        row=0
        champs = ["id","name","Area","type","RAC","COMM"]
        self.dlg.tableWidget.setHorizontalHeaderLabels(champs)
        for i in range(0,nbr):
            Feature= layer.getFeature(i)
            self.dlg.tableWidget.setItem(row,0,QtWidgets.QTableWidgetItem(str(Feature['id'])))
            self.dlg.tableWidget.setItem(row,1,QtWidgets.QTableWidgetItem(str(Feature['name'])))
            self.dlg.tableWidget.setItem(row,2,QtWidgets.QTableWidgetItem(str(Feature['Area'])))
            self.dlg.tableWidget.setItem(row,3,QtWidgets.QTableWidgetItem(str(Feature['type'])))
            self.dlg.tableWidget.setItem(row,4,QtWidgets.QTableWidgetItem(str(Feature['Area1'])))
            self.dlg.tableWidget.setItem(row,5,QtWidgets.QTableWidgetItem(str(Feature['COMM'])))
            row= row+1


     #chercher le parc par son nom et afficher ses informations dans un tableau en l'affichant avec une couleur jaune sur la carte
    def trouverPark(self):
        self.dlg.tableWidget.clearContents()
        layer = iface.activeLayer()
        name= self.dlg.lineEdit_3.text()
        iface.mapCanvas().setSelectionColor(QColor('yellow'))
        layer.selectByExpression(" \"name\" ='{}' ".format(name))
        selectfeature = layer.selectedFeatures()
        for Feature in selectfeature:
                self.dlg.tableWidget.setItem(0,0,QtWidgets.QTableWidgetItem(str(Feature['id'])))
                self.dlg.tableWidget.setItem(0,1,QtWidgets.QTableWidgetItem(str(Feature['name'])))
                self.dlg.tableWidget.setItem(0,2,QtWidgets.QTableWidgetItem(str(Feature['Area'])))
                self.dlg.tableWidget.setItem(0,3,QtWidgets.QTableWidgetItem(str(Feature['type'])))
                self.dlg.tableWidget.setItem(0,4,QtWidgets.QTableWidgetItem(str(Feature['Area1'])))
                self.dlg.tableWidget.setItem(0,5,QtWidgets.QTableWidgetItem(str(Feature['COMM'])))
        self.dlg.tableWidget.setRowCount(1)  

    
    #calculer l'AREA d'un parc sélectioné 
    def afficherArea(self):
        self.dlg.label_6.setText("Calculer Area :")
        self.dlg.label_6.setFont(QtGui.QFont("Arial",10))
        self.dlg.label_6.setStyleSheet("color:red")

        layer=iface.activeLayer()
        parc = self.dlg.comboBox.currentText()
        iface.mapCanvas().setSelectionColor(QColor('yellow'))
        layer.selectByExpression("\"name\"='{}'".format(parc))
        selection=layer.selectedFeatures()
        for feature in selection:
            self.dlg.lineEdit_2.setText(str(feature['Area'] ))


    #calculer le RAC d'un parc sélectioné 
    def afficherRAC(self):
        self.dlg.label_6.setText("Calculer RAC :")
        self.dlg.label_6.setFont(QtGui.QFont("Arial",10))
        self.dlg.label_6.setStyleSheet("color:blue")

        layer=iface.activeLayer()
        parc = self.dlg.comboBox.currentText()
        iface.mapCanvas().setSelectionColor(QColor('yellow'))
        layer.selectByExpression("\"name\"='{}'".format(parc))
        selection=layer.selectedFeatures()
        for feature in selection:
            self.dlg.lineEdit_2.setText(str(feature['Area1'] ))        
            

